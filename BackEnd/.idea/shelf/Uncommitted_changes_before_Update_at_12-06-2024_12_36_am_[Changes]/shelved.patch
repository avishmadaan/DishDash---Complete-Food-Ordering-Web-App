Index: customersapiservice/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.example</groupId>\r\n\t\t<artifactId>FoodieApp</artifactId>\r\n\t\t<version>1.0-SNAPSHOT</version>\r\n\t</parent>\r\n\t<groupId>com.bej</groupId>\r\n\t<artifactId>customersapiservice</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>customersapiservice</name>\r\n\t<description>Customer microservice</description>\r\n\t<properties>\r\n\t\t<java.version>17</java.version>\r\n\t\t<spring-cloud.version>2023.0.2</spring-cloud.version>\r\n\t</properties>\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.cloud</groupId>\r\n\t\t\t<artifactId>spring-cloud-starter-openfeign</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.jsonwebtoken</groupId>\r\n\t\t\t<artifactId>jjwt</artifactId>\r\n\t\t\t<version>0.9.1</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.cloud</groupId>\r\n\t\t\t<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t<optional>true</optional>\r\n\t\t</dependency>\r\n\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-mail</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.sun.mail</groupId>\r\n\t\t\t<artifactId>jakarta.mail</artifactId>\r\n\t\t\t<version>1.6.7</version> <!-- or the latest version -->\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n\t<dependencyManagement>\r\n\t\t<dependencies>\r\n\t\t\t<dependency>\r\n\t\t\t\t<groupId>org.springframework.cloud</groupId>\r\n\t\t\t\t<artifactId>spring-cloud-dependencies</artifactId>\r\n\t\t\t\t<version>${spring-cloud.version}</version>\r\n\t\t\t\t<type>pom</type>\r\n\t\t\t\t<scope>import</scope>\r\n\t\t\t</dependency>\r\n\t\t</dependencies>\r\n\t</dependencyManagement>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<excludes>\r\n\t\t\t\t\t\t<exclude>\r\n\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t\t\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t\t\t\t</exclude>\r\n\t\t\t\t\t</excludes>\r\n\t\t\t\t</configuration>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/customersapiservice/pom.xml b/customersapiservice/pom.xml
--- a/customersapiservice/pom.xml	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/customersapiservice/pom.xml	(date 1718108355257)
@@ -51,11 +51,6 @@
 			<artifactId>spring-boot-starter-mail</artifactId>
 		</dependency>
 		<dependency>
-			<groupId>com.sun.mail</groupId>
-			<artifactId>jakarta.mail</artifactId>
-			<version>1.6.7</version> <!-- or the latest version -->
-		</dependency>
-		<dependency>
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-test</artifactId>
 			<scope>test</scope>
Index: customersapiservice/src/main/java/com/bej/customersapiservice/CustomersapiserviceApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bej.customersapiservice;\r\n\r\nimport com.bej.customersapiservice.filter.JwtFilter;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\r\nimport org.springframework.cloud.openfeign.EnableFeignClients;\r\nimport org.springframework.context.annotation.Bean;\r\n\r\n@SpringBootApplication\r\n@EnableFeignClients\r\npublic class CustomersapiserviceApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(CustomersapiserviceApplication.class, args);\r\n\t}\r\n\t@Bean\r\n\tpublic FilterRegistrationBean jwtFilterBean(){\r\n\t\tFilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();\r\n\t\tfilterRegistrationBean.setFilter(new JwtFilter());\r\n\t\tfilterRegistrationBean.addUrlPatterns(\"/api/v2/customers/*\");\r\n\t\treturn filterRegistrationBean;\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/customersapiservice/src/main/java/com/bej/customersapiservice/CustomersapiserviceApplication.java b/customersapiservice/src/main/java/com/bej/customersapiservice/CustomersapiserviceApplication.java
--- a/customersapiservice/src/main/java/com/bej/customersapiservice/CustomersapiserviceApplication.java	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/customersapiservice/src/main/java/com/bej/customersapiservice/CustomersapiserviceApplication.java	(date 1718089173860)
@@ -6,9 +6,11 @@
 import org.springframework.boot.web.servlet.FilterRegistrationBean;
 import org.springframework.cloud.openfeign.EnableFeignClients;
 import org.springframework.context.annotation.Bean;
+import org.springframework.web.bind.annotation.CrossOrigin;
 
 @SpringBootApplication
 @EnableFeignClients
+@CrossOrigin
 public class CustomersapiserviceApplication {
 
 	public static void main(String[] args) {
Index: customersapiservice/src/main/java/com/bej/customersapiservice/services/ICustomerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bej.customersapiservice.services;\r\n\r\nimport com.bej.customersapiservice.domain.Customer;\r\nimport com.bej.customersapiservice.exception.CustomerAlreadyExistException;\r\nimport com.bej.customersapiservice.exception.CustomerNotFoundException;\r\n\r\nimport java.util.List;\r\n\r\npublic interface ICustomerService {\r\n\r\n    public Customer registerCustomer(Customer customer) throws CustomerAlreadyExistException;\r\n    public Customer updateCustomer(Customer customer, String customerId) throws CustomerAlreadyExistException, CustomerNotFoundException;\r\n    public String addFavoriteRestaurant(String resId,String customerId) throws CustomerNotFoundException;\r\n    public String addFavoriteDish(Object obj,String customerId) throws CustomerNotFoundException;\r\n    public List<Object> getAllFavRestaurant(String customerId);\r\n    public List<Object> getAllFavDishes(String customerId);\r\n    public Customer getCustomerById(String customerId) throws CustomerNotFoundException;\r\n    public boolean deleteFavRestaurant(String customerId,Object restName) throws CustomerNotFoundException;\r\n    public boolean deleteFavDish(String customerId,Object dish) throws CustomerNotFoundException;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/customersapiservice/src/main/java/com/bej/customersapiservice/services/ICustomerService.java b/customersapiservice/src/main/java/com/bej/customersapiservice/services/ICustomerService.java
--- a/customersapiservice/src/main/java/com/bej/customersapiservice/services/ICustomerService.java	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/customersapiservice/src/main/java/com/bej/customersapiservice/services/ICustomerService.java	(date 1718089173934)
@@ -17,4 +17,6 @@
     public Customer getCustomerById(String customerId) throws CustomerNotFoundException;
     public boolean deleteFavRestaurant(String customerId,Object restName) throws CustomerNotFoundException;
     public boolean deleteFavDish(String customerId,Object dish) throws CustomerNotFoundException;
+
+    public Customer testRegister(Customer customer);
 }
Index: customersapiservice/src/main/java/com/bej/customersapiservice/services/ImplCustomerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bej.customersapiservice.services;\r\n\r\nimport com.bej.customersapiservice.domain.Customer;\r\nimport com.bej.customersapiservice.exception.CustomerAlreadyExistException;\r\nimport com.bej.customersapiservice.exception.CustomerNotFoundException;\r\nimport com.bej.customersapiservice.proxy.CustomerProxy;\r\nimport com.bej.customersapiservice.respository.CustomerRepo;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n@Service\r\npublic class ImplCustomerService implements ICustomerService {\r\n\r\n    @Autowired\r\n    private CustomerRepo customerRepo;\r\n    @Autowired\r\n    private CustomerProxy customerProxy;\r\n    @Override\r\n    public Customer registerCustomer(Customer customer) throws CustomerAlreadyExistException {\r\n        if(customerRepo.findById(customer.getCustomerId()).isPresent()) {\r\n            throw new CustomerAlreadyExistException();\r\n        }\r\n        if(customer.getCustomerFavDishes() ==  null) {\r\n            customer.setCustomerFavDishes(new ArrayList<>());\r\n        }\r\n        if(customer.getCustomerFavRestaurants() == null) {\r\n            customer.setCustomerFavRestaurants(new ArrayList<>());\r\n        }\r\n//\r\n//        customerProxy.registerCustomer(customer);\r\n//        return customerRepo.save(customer);\r\n        Customer customer1=customerRepo.save(customer);\r\n        if(!(customer1.getCustomerId().isEmpty()))\r\n        {\r\n            ResponseEntity<?> proxyResponse=customerProxy.registerCustomer(customer);\r\n            System.out.println(proxyResponse.getBody());\r\n        }\r\n        return customer1;\r\n    }\r\n\r\n    public Customer updateCustomer(Customer customer, String customerId) throws CustomerNotFoundException {\r\n        if(customerRepo.findById(customerId).isPresent()) {\r\n            return customerRepo.save(customer);\r\n        }\r\n        else {\r\n            throw new CustomerNotFoundException();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public String addFavoriteRestaurant(String resId,String customerId) throws CustomerNotFoundException {\r\n        System.out.println(\"Inside\");\r\n        System.out.println(\"Inside Imple :\" + customerRepo.findById(customerId).get() +\"Object :\"+resId);\r\n        Customer optionalCustomer=customerRepo.findById(customerId).orElseThrow(CustomerNotFoundException::new);\r\n        if(optionalCustomer.getCustomerFavRestaurants()==null)\r\n        {\r\n            optionalCustomer.setCustomerFavRestaurants(new ArrayList<>());\r\n        }\r\n\r\n        List<Object> favList = optionalCustomer.getCustomerFavRestaurants();\r\n        favList.add(resId);\r\n        customerRepo.save(optionalCustomer);\r\n        return \"Favourite Restaurant added\";\r\n    }\r\n\r\n    @Override\r\n    public String addFavoriteDish(Object obj, String customerId) throws CustomerNotFoundException {\r\n        Customer customer= customerRepo.findById(customerId).orElseThrow(CustomerNotFoundException::new);\r\n\r\n        if (customer.getCustomerFavDishes() == null) {\r\n            customer.setCustomerFavDishes(new ArrayList<>());\r\n        }\r\n\r\n        List<Object> favDishList = customer.getCustomerFavDishes();\r\n        favDishList.add(obj);\r\n        customerRepo.save(customer);\r\n        return \"Dish added to your favorites...\";\r\n\r\n    }\r\n\r\n    @Override\r\n    public List<Object> getAllFavRestaurant(String customerId) {\r\n\r\n        Optional<Customer> restCustomer = customerRepo.findById(customerId);\r\n        System.out.println(restCustomer.get());\r\n        return restCustomer.get().getCustomerFavRestaurants();\r\n    }\r\n\r\n    @Override\r\n    public List<Object> getAllFavDishes(String customerId) {\r\n        Optional<Customer> restCustomer = customerRepo.findById(customerId);\r\n        System.out.println(restCustomer.get());\r\n        return restCustomer.get().getCustomerFavDishes();\r\n    }\r\n\r\n    @Override\r\n    public Customer getCustomerById(String customerId) throws CustomerNotFoundException {\r\n        return customerRepo.findById(customerId).orElseThrow(CustomerNotFoundException::new);\r\n    }\r\n\r\n    @Override\r\n    public boolean deleteFavRestaurant(String customerId,Object resId) throws CustomerNotFoundException {\r\n        boolean isDeleted=false;\r\n        Optional<Customer> optionalCustomer=customerRepo.findById(customerId);\r\n\r\n        if(optionalCustomer.isEmpty())\r\n        {\r\n            throw new CustomerNotFoundException();\r\n        }\r\n        Customer customer=optionalCustomer.get();\r\n        List<Object> favRestList= customer.getCustomerFavRestaurants();\r\n        favRestList.remove(resId);\r\n        customer.setCustomerFavRestaurants(favRestList);\r\n        customerRepo.save(customer);\r\n        isDeleted=true;\r\n\r\n        return isDeleted;\r\n    }\r\n    public boolean deleteFavDish(String customerId,Object dish) throws CustomerNotFoundException {\r\n        boolean isDeleted=false;\r\n        Optional<Customer> optionalCustomer=customerRepo.findById(customerId);\r\n\r\n        if(optionalCustomer.isEmpty())\r\n        {\r\n            throw new CustomerNotFoundException();\r\n        }\r\n        Customer customer=optionalCustomer.get();\r\n\r\n        List<Object> favList = customer.getCustomerFavDishes();\r\n        favList.remove(dish);\r\n        customer.setCustomerFavDishes(favList);\r\n        customerRepo.save(customer);\r\n        isDeleted=true;\r\n\r\n        return isDeleted;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/customersapiservice/src/main/java/com/bej/customersapiservice/services/ImplCustomerService.java b/customersapiservice/src/main/java/com/bej/customersapiservice/services/ImplCustomerService.java
--- a/customersapiservice/src/main/java/com/bej/customersapiservice/services/ImplCustomerService.java	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/customersapiservice/src/main/java/com/bej/customersapiservice/services/ImplCustomerService.java	(date 1718089173986)
@@ -20,6 +20,11 @@
     private CustomerRepo customerRepo;
     @Autowired
     private CustomerProxy customerProxy;
+
+    @Override
+    public Customer testRegister(Customer customer){
+        return this.customerRepo.save(customer);
+    }
     @Override
     public Customer registerCustomer(Customer customer) throws CustomerAlreadyExistException {
         if(customerRepo.findById(customer.getCustomerId()).isPresent()) {
@@ -31,9 +36,7 @@
         if(customer.getCustomerFavRestaurants() == null) {
             customer.setCustomerFavRestaurants(new ArrayList<>());
         }
-//
-//        customerProxy.registerCustomer(customer);
-//        return customerRepo.save(customer);
+
         Customer customer1=customerRepo.save(customer);
         if(!(customer1.getCustomerId().isEmpty()))
         {
Index: customersapiservice/src/main/java/com/bej/customersapiservice/controller/CustomerController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bej.customersapiservice.controller;\r\n\r\nimport com.bej.customersapiservice.domain.Customer;\r\nimport com.bej.customersapiservice.emails.IGenerateEmails;\r\nimport com.bej.customersapiservice.exception.CustomerAlreadyExistException;\r\nimport com.bej.customersapiservice.exception.CustomerNotFoundException;\r\nimport com.bej.customersapiservice.services.EmailService;\r\nimport com.bej.customersapiservice.services.ICustomerService;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.annotation.Id;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/v2\")\r\n@CrossOrigin\r\npublic class CustomerController {\r\n\r\n    @Autowired\r\n    private ICustomerService iCustomerService;\r\n\r\n    @Autowired\r\n    private EmailService emailService;\r\n\r\n    @Autowired\r\n    private IGenerateEmails iGenerateEmails;\r\n\r\n    @PostMapping(\"/register\")\r\n    public ResponseEntity registerCustomer(@RequestBody Customer customer) {\r\n        try {\r\n            ResponseEntity<?> response =  new ResponseEntity(iCustomerService.registerCustomer(customer), HttpStatus.CREATED);\r\n            emailService.sendEmail(customer.getCustomerEmail(),\"Welcome To DishDash\", iGenerateEmails.generateWelcomeEmail(customer.getCustomerName(), customer.getCustomerEmail(), customer.getCustomerPassword()));\r\n            return response;\r\n        } catch (CustomerAlreadyExistException e) {\r\n            return new ResponseEntity(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);\r\n        }\r\n    }\r\n\r\n    @PutMapping(\"/customers/update\")\r\n    public ResponseEntity updateCustomer(@RequestBody Customer customer, HttpServletRequest request) {\r\n        String customerId = (String) request.getAttribute(\"customerId\");\r\n        try {\r\n            return new ResponseEntity(iCustomerService.updateCustomer(customer, customerId), HttpStatus.OK);\r\n        } catch (Exception e) {\r\n            return new ResponseEntity(e.getMessage(), HttpStatus.NOT_FOUND);\r\n        }\r\n    }\r\n\r\n    @PutMapping(\"/customers/addfavres\")\r\n    public ResponseEntity updateFavRest(@RequestBody String obj, HttpServletRequest request) throws CustomerNotFoundException {\r\n        String customerId = (String) request.getAttribute(\"customerId\");\r\n        return new ResponseEntity<>(iCustomerService.addFavoriteRestaurant(obj,customerId),HttpStatus.OK);\r\n    }\r\n\r\n    @PutMapping(\"/customers/addfavdish\")\r\n    public ResponseEntity updateFavDish(@RequestBody Object obj, HttpServletRequest request) throws CustomerNotFoundException {\r\n        String customerId = (String) request.getAttribute(\"customerId\");\r\n        return new ResponseEntity<>(iCustomerService.addFavoriteDish(obj,customerId),HttpStatus.OK);\r\n    }\r\n\r\n    @GetMapping(\"/customers/restaurant\")\r\n    public ResponseEntity fetchFavRest(HttpServletRequest request)\r\n    {\r\n        String customerId = (String) request.getAttribute(\"customerId\");\r\n        return new ResponseEntity<>(iCustomerService.getAllFavRestaurant(customerId),HttpStatus.OK);\r\n    }\r\n    @GetMapping(\"/customers/dishes\")\r\n    public ResponseEntity fetchFavDish(HttpServletRequest request)\r\n    {\r\n        String customerId = (String) request.getAttribute(\"customerId\");\r\n        return new ResponseEntity<>(iCustomerService.getAllFavDishes(customerId),HttpStatus.OK);\r\n    }\r\n    @GetMapping(\"/eachcustomer\")\r\n    public ResponseEntity<?> fetchByJwtToken(HttpServletRequest request) throws CustomerNotFoundException {\r\n        String customerId = (String) request.getAttribute(\"customerId\");\r\n        return new ResponseEntity<>(iCustomerService.getCustomerById(customerId),HttpStatus.OK);\r\n    }\r\n    @DeleteMapping(\"/customers/deletedish\")\r\n    public ResponseEntity<?> deleteFavDish(@RequestBody Object dish, HttpServletRequest request) throws CustomerNotFoundException {\r\n        String customerId = (String) request.getAttribute(\"customerId\");\r\n        return new ResponseEntity<>(iCustomerService.deleteFavDish(customerId,dish),HttpStatus.OK);\r\n    }\r\n    @DeleteMapping(\"/customers/deletedrestaurant/{restName}\")\r\n    public ResponseEntity<?> deleteFavRest(@RequestBody Object restName, HttpServletRequest request) throws CustomerNotFoundException {\r\n        String customerId = (String) request.getAttribute(\"customerId\");\r\n        return new ResponseEntity<>(iCustomerService.deleteFavRestaurant(customerId,restName),HttpStatus.OK);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/customersapiservice/src/main/java/com/bej/customersapiservice/controller/CustomerController.java b/customersapiservice/src/main/java/com/bej/customersapiservice/controller/CustomerController.java
--- a/customersapiservice/src/main/java/com/bej/customersapiservice/controller/CustomerController.java	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/customersapiservice/src/main/java/com/bej/customersapiservice/controller/CustomerController.java	(date 1718089174072)
@@ -15,7 +15,7 @@
 
 @RestController
 @RequestMapping("/api/v2")
-@CrossOrigin
+@CrossOrigin(origins = "http://localhost:4200")
 public class CustomerController {
 
     @Autowired
@@ -27,6 +27,11 @@
     @Autowired
     private IGenerateEmails iGenerateEmails;
 
+    @PostMapping("/registertest")
+    public ResponseEntity registerCustomertest(@RequestBody Customer customer) {
+        return new ResponseEntity(iCustomerService.testRegister(customer), HttpStatus.CREATED);
+    }
+
     @PostMapping("/register")
     public ResponseEntity registerCustomer(@RequestBody Customer customer) {
         try {
@@ -72,7 +77,7 @@
         String customerId = (String) request.getAttribute("customerId");
         return new ResponseEntity<>(iCustomerService.getAllFavDishes(customerId),HttpStatus.OK);
     }
-    @GetMapping("/eachcustomer")
+    @GetMapping("/customers/eachcustomer")
     public ResponseEntity<?> fetchByJwtToken(HttpServletRequest request) throws CustomerNotFoundException {
         String customerId = (String) request.getAttribute("customerId");
         return new ResponseEntity<>(iCustomerService.getCustomerById(customerId),HttpStatus.OK);
Index: ../FrontEnd/DishDash/src/app/Components/restaurantview/restaurantview.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"restaurantbox\" *ngIf=\"oneRestaurant\">\r\n    <div class=\"infobox bg-light p-3 m-3\">\r\n        <div class=\"photos flex\">\r\n            <img alt=\"Restaurant\" *ngFor=\"let x of oneRestaurant.resImages\" [src]=\"x\">\r\n            \r\n        </div>\r\n        <div class=\"descriptionbox flex justify-content-between\">\r\n            <div class=\"left\">\r\n                <h2>{{oneRestaurant.resName}}</h2>\r\n                <p>{{oneRestaurant.resCuisines}}</p>\r\n                <span>{{oneRestaurant.resAddress}}</span>\r\n            </div>\r\n            <div class=\"right flex \">\r\n                <span>{{oneRestaurant.resRating}}</span>\r\n                <mat-icon class=\"fav\" fontIcon=\"favorite_border\" (click)=\"toogleFav()\" ></mat-icon>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"menubox bg-light flex p-3 m-3\">\r\n        <div class=\"menuleft bg-danger-subtle p-3\">\r\n\r\n            <p *ngFor=\"let category of categoryArray\">{{category[0]}} ({{category[1]}})</p>\r\n        </div>\r\n\r\n        <div class=\"menuright\">\r\n            <!-- <div class=\"categories\" *ngFor=\"let category of oneRestaurant.resCategories\">\r\n                <h4>{{category}}</h4>\r\n            </div> -->\r\n        \r\n            <div class=\"menuitem bg-body-secondary flex p-2 m-2 mb-3 gap-3\" *ngFor=\"let menu of oneRestaurant.resMenu\">\r\n                <div class=\"part1\">\r\n                    <img [src]=\"menu.dishImage\" alt=\"\">\r\n                </div>\r\n                <div class=\"part2\">\r\n                    <h5 class=\"m-0\">{{menu.dishName}}</h5>\r\n                    <p class=\"m-0\">{{menu.dishRating}} people rated</p>\r\n                    <p class=\"m-0\">Rs {{menu.dishPrice}}/-</p>\r\n                    <span class=\"m-0\">{{menu.dishDescription}}</span>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FrontEnd/DishDash/src/app/Components/restaurantview/restaurantview.component.html b/../FrontEnd/DishDash/src/app/Components/restaurantview/restaurantview.component.html
--- a/../FrontEnd/DishDash/src/app/Components/restaurantview/restaurantview.component.html	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/../FrontEnd/DishDash/src/app/Components/restaurantview/restaurantview.component.html	(date 1718111843054)
@@ -6,13 +6,14 @@
         </div>
         <div class="descriptionbox flex justify-content-between">
             <div class="left">
-                <h2>{{oneRestaurant.resName}}</h2>
+                <h2 >{{oneRestaurant.resName}}</h2>
                 <p>{{oneRestaurant.resCuisines}}</p>
                 <span>{{oneRestaurant.resAddress}}</span>
             </div>
             <div class="right flex ">
+               
                 <span>{{oneRestaurant.resRating}}</span>
-                <mat-icon class="fav" fontIcon="favorite_border" (click)="toogleFav()" ></mat-icon>
+                <mat-icon class="fav" [fontIcon]="isFavorite ? 'favorite':'favorite_border'" (click)="toogleFav()" ></mat-icon>
             </div>
         </div>
     </div>
Index: UserAuthenticationService/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.application.name=UserAuthenticationService\r\n\r\nserver.port = 8081\r\n\r\nspring.datasource.url=jdbc:mysql://localhost:3306/CapstoneCustomer\r\nspring.datasource.username=root\r\nspring.datasource.password=root@123\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.show-sql=true\r\n\r\neureka.client.register-with-eureka=true\r\neureka.client.fetch-registry=true\r\nlogging.level.org.springframework=info\r\nlogging.level.com.example.UserAuthenticationService=debug\r\nlogging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/UserAuthenticationService/src/main/resources/application.properties b/UserAuthenticationService/src/main/resources/application.properties
--- a/UserAuthenticationService/src/main/resources/application.properties	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/UserAuthenticationService/src/main/resources/application.properties	(date 1718089173715)
@@ -4,7 +4,7 @@
 
 spring.datasource.url=jdbc:mysql://localhost:3306/CapstoneCustomer
 spring.datasource.username=root
-spring.datasource.password=root@123
+spring.datasource.password=Rockstar@123*
 spring.jpa.hibernate.ddl-auto=update
 spring.jpa.show-sql=true
 
Index: ../FrontEnd/DishDash/src/app/Components/restaurantview/restaurantview.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { reduce } from 'rxjs';\r\nimport { restaurant } from '../../Model/restaurant';\r\nimport { RestaurantService } from '../../services/restaurant.service';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { Dialog } from '@angular/cdk/dialog';\r\nimport { LoginalertComponent } from '../loginalert/loginalert.component';\r\n\r\n@Component({\r\n  selector: 'app-restaurantview',\r\n  templateUrl: './restaurantview.component.html',\r\n  styleUrl: './restaurantview.component.css'\r\n})\r\nexport class RestaurantviewComponent implements OnInit {\r\n\r\n  oneRestaurant:restaurant;\r\n  categoryAndCount = new Map();\r\n  categoryArray:[string, number][]=[];\r\n\r\n  constructor(private ac:ActivatedRoute, private resService:RestaurantService, private cookieService:CookieService, private dialog:Dialog) {}\r\n\r\n  ngOnInit(): void {\r\n    this.ac.paramMap.subscribe({\r\n      next:data => {\r\n        let restId = data.get(\"resid\")\r\n        console.log(restId);\r\n        this.resService.fetchRestaurantByid(restId).subscribe({\r\n          next:data => {\r\n            console.log(data);\r\n            this.oneRestaurant = data;\r\n            this.prepareMapForCategories();\r\n            this.categoryArray = Array.from(this.categoryAndCount.entries())\r\n            console.log(this.categoryArray);\r\n          }\r\n        })\r\n\r\n      },\r\n      error:e => {\r\n        console.log(e);\r\n      }\r\n    })\r\n  }\r\n\r\n  toogleFav() {\r\nif(!this.cookieService.get(\"token\")) {\r\nthis.dialog.open(LoginalertComponent)\r\n}\r\n  }\r\n\r\n  prepareMapForCategories() {\r\n    \r\n   \r\n    for(let cateogry of this.oneRestaurant.resCategories) {\r\n      let count =0\r\n      for(let dish of this.oneRestaurant.resMenu) {\r\n        if(dish.dishCategory.toLowerCase() == cateogry.toLowerCase()) {\r\n          count++;\r\n        }\r\n      }\r\n      this.categoryAndCount.set(cateogry,count);\r\n    }\r\n  \r\n  }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FrontEnd/DishDash/src/app/Components/restaurantview/restaurantview.component.ts b/../FrontEnd/DishDash/src/app/Components/restaurantview/restaurantview.component.ts
--- a/../FrontEnd/DishDash/src/app/Components/restaurantview/restaurantview.component.ts	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/../FrontEnd/DishDash/src/app/Components/restaurantview/restaurantview.component.ts	(date 1718111895898)
@@ -6,6 +6,9 @@
 import { CookieService } from 'ngx-cookie-service';
 import { Dialog } from '@angular/cdk/dialog';
 import { LoginalertComponent } from '../loginalert/loginalert.component';
+import { RegisterComponent } from '../register/register.component';
+import { MatDialog } from '@angular/material/dialog';
+import { UserService } from '../../services/user.service';
 
 @Component({
   selector: 'app-restaurantview',
@@ -17,8 +20,10 @@
   oneRestaurant:restaurant;
   categoryAndCount = new Map();
   categoryArray:[string, number][]=[];
+  isFavorite:boolean = false;
+  custFavorites:string[]=[];
 
-  constructor(private ac:ActivatedRoute, private resService:RestaurantService, private cookieService:CookieService, private dialog:Dialog) {}
+  constructor(private ac:ActivatedRoute, private resService:RestaurantService, private cookieService:CookieService, public dialog:MatDialog, private userService:UserService) {}
 
   ngOnInit(): void {
     this.ac.paramMap.subscribe({
@@ -31,6 +36,22 @@
             this.oneRestaurant = data;
             this.prepareMapForCategories();
             this.categoryArray = Array.from(this.categoryAndCount.entries())
+
+            if(this.cookieService.get("token")) {
+
+              this.userService.getCustomerFavRestaurants.subscribe({
+                next:data => {
+                  console.log("is fav: "+this.isFavorite)
+                  this.custFavorites = data;
+                  if( this.custFavorites.includes(this.oneRestaurant.resId)) {
+                    this.isFavorite = true;
+                    console.log("is fav: "+this.isFavorite)
+                  }
+                 
+                }
+              })
+            }
+            
             console.log(this.categoryArray);
           }
         })
@@ -42,11 +63,33 @@
     })
   }
 
-  toogleFav() {
+toogleFav() {
+
 if(!this.cookieService.get("token")) {
-this.dialog.open(LoginalertComponent)
+  this.openLoginAlertDialog('3000ms', '1500ms');
+}
+
+this.isFavorite = !this.isFavorite;
+console.log("Sending " +this.isFavorite)
+if(this.isFavorite) {
+  console.log("Sending Fav Called")
+  const Jwt = this.cookieService.get("token");
+  this.userService.sendFavoriteRestToCustomer(this.oneRestaurant.resId,Jwt )
 }
+
+
+
+
   }
+
+
+
+  openLoginAlertDialog(enterAnimationDuration: string, exitAnimationDuration: string): void {
+    this.dialog.open(LoginalertComponent, {
+      width: '400px'
+    });
+  }
+
 
   prepareMapForCategories() {
     
Index: ../FrontEnd/DishDash/src/app/Model/customer.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { address } from \"./address\"\r\nimport { favdishes } from \"./favdishes\"\r\nimport { favrestaurant } from \"./favrestaurant\"\r\n\r\nexport class customer {\r\n    customerName: string\r\n    customerEmail: string\r\n    customerPassword: string\r\n    customerProfilePic?: string\r\n    customerPhone: number\r\n    customerAddress?:address[]\r\n    customerFavRestaurant?:favrestaurant[]\r\n    customerFavDishes?:favdishes[]\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FrontEnd/DishDash/src/app/Model/customer.ts b/../FrontEnd/DishDash/src/app/Model/customer.ts
--- a/../FrontEnd/DishDash/src/app/Model/customer.ts	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/../FrontEnd/DishDash/src/app/Model/customer.ts	(date 1718110345649)
@@ -9,6 +9,6 @@
     customerProfilePic?: string
     customerPhone: number
     customerAddress?:address[]
-    customerFavRestaurant?:favrestaurant[]
+    customerFavRestaurant?:string[]
     customerFavDishes?:favdishes[]
 }
\ No newline at end of file
Index: ../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><mat-icon  aria-hidden=\"false\" aria-label=\"Example home icon\" fontIcon=\"alert\"></mat-icon>\r\n\r\n<h3>Login Alert</h3>\r\n<p (click)=\"openLoginDialog()\">Do login First</p>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.html b/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.html
--- a/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.html	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.html	(date 1718109969301)
@@ -1,4 +1,14 @@
-<mat-icon  aria-hidden="false" aria-label="Example home icon" fontIcon="alert"></mat-icon>
-
-<h3>Login Alert</h3>
-<p (click)="openLoginDialog()">Do login First</p>
\ No newline at end of file
+<div class=" header flex justify-content-between align-items">
+    <button mat-icon-button class="close-button" (click)="closeDialog()">
+      <mat-icon>close</mat-icon>
+    </button>
+  </div>
+<div>
+<h1 mat-dialog-title>  <mat-icon  aria-hidden="false" aria-label="Example home icon" fontIcon="error"></mat-icon></h1>
+<div mat-dialog-content>
+  <!-- Your content here -->
+   <h4>You need to Login First</h4>
+   <a class="login pointer" (click)="openLoginDialog()">Here you can login
+   </a>
+</div>
+</div>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9c8a6dba-7c8c-426b-ad82-e45f53e77f5c\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/emails/GenerateEmails.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/emails/IGenerateEmails.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/services/EmailService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/customersapiservice/pom.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/customersapiservice/pom.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/controller/CustomerController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/controller/CustomerController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/customersapiservice/src/main/resources/application.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/customersapiservice/src/main/resources/application.properties\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2hRdb5bzKy99WtrSghQJjDoSedT\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.ApiGateawayApplication.executor\": \"Run\",\r\n    \"Application.CustomersapiserviceApplication.executor\": \"Run\",\r\n    \"Application.EurekaDiscoveryServerApplication.executor\": \"Run\",\r\n    \"Application.RestaurantServiceApplication.executor\": \"Run\",\r\n    \"Application.UserAuthenticationServiceApplication.executor\": \"Run\",\r\n    \"Application.abc.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"dev-v1\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"D:/Personal Folders/SND/major-capstone-project/BackEnd\",\r\n    \"settings.editor.selected.configurable\": \"preferences.pluginManager\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Avish Madaan\\Desktop\\NIIT\\Phase 2\\Course 14 - Capstone Project\\major-capstone-project\\FoodieApp\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.ApiGateawayApplication\">\r\n    <configuration name=\"ApiGateawayApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.ApiGateaway.ApiGateawayApplication\" />\r\n      <module name=\"ApiGateaway\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.example.ApiGateaway.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"CustomersapiserviceApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.bej.customersapiservice.CustomersapiserviceApplication\" />\r\n      <module name=\"customersapiservice\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.bej.customersapiservice.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"EurekaDiscoveryServerApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.EurekaDiscoveryServer.EurekaDiscoveryServerApplication\" />\r\n      <module name=\"EurekaDiscoveryServer\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.example.EurekaDiscoveryServer.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"RestaurantServiceApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.RestaurantService.RestaurantServiceApplication\" />\r\n      <module name=\"RestaurantService\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.example.RestaurantService.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"UserAuthenticationServiceApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.UserAuthenticationService.UserAuthenticationServiceApplication\" />\r\n      <module name=\"UserAuthenticationService\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.example.UserAuthenticationService.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.RestaurantServiceApplication\" />\r\n      <item itemvalue=\"Application.ApiGateawayApplication\" />\r\n      <item itemvalue=\"Application.CustomersapiserviceApplication\" />\r\n      <item itemvalue=\"Application.EurekaDiscoveryServerApplication\" />\r\n      <item itemvalue=\"Application.UserAuthenticationServiceApplication\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.CustomersapiserviceApplication\" />\r\n        <item itemvalue=\"Application.ApiGateawayApplication\" />\r\n        <item itemvalue=\"Application.UserAuthenticationServiceApplication\" />\r\n        <item itemvalue=\"Application.EurekaDiscoveryServerApplication\" />\r\n        <item itemvalue=\"Application.RestaurantServiceApplication\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"9c8a6dba-7c8c-426b-ad82-e45f53e77f5c\" name=\"Changes\" comment=\"\" />\r\n      <created>1717560898011</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1717560898011</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/.idea/workspace.xml	(date 1718108246749)
@@ -5,14 +5,16 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="9c8a6dba-7c8c-426b-ad82-e45f53e77f5c" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/emails/GenerateEmails.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/emails/IGenerateEmails.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/services/EmailService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/customersapiservice/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/customersapiservice/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/UserAuthenticationService/src/main/java/com/example/UserAuthenticationService/domain/Customer.java" beforeDir="false" afterPath="$PROJECT_DIR$/UserAuthenticationService/src/main/java/com/example/UserAuthenticationService/domain/Customer.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/UserAuthenticationService/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/UserAuthenticationService/src/main/resources/application.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/CustomersapiserviceApplication.java" beforeDir="false" afterPath="$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/CustomersapiserviceApplication.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/controller/CustomerController.java" beforeDir="false" afterPath="$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/controller/CustomerController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/customersapiservice/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/customersapiservice/src/main/resources/application.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/services/ICustomerService.java" beforeDir="false" afterPath="$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/services/ICustomerService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/services/ImplCustomerService.java" beforeDir="false" afterPath="$PROJECT_DIR$/customersapiservice/src/main/java/com/bej/customersapiservice/services/ImplCustomerService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.html" beforeDir="false" afterPath="$PROJECT_DIR$/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.ts" beforeDir="false" afterPath="$PROJECT_DIR$/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../FrontEnd/DishDash/src/app/Components/restaurantview/restaurantview.component.ts" beforeDir="false" afterPath="$PROJECT_DIR$/../FrontEnd/DishDash/src/app/Components/restaurantview/restaurantview.component.ts" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -41,28 +43,28 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Application.ApiGateawayApplication.executor": "Run",
-    "Application.CustomersapiserviceApplication.executor": "Run",
-    "Application.EurekaDiscoveryServerApplication.executor": "Run",
-    "Application.RestaurantServiceApplication.executor": "Run",
-    "Application.UserAuthenticationServiceApplication.executor": "Run",
-    "Application.abc.executor": "Run",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "dev-v1",
-    "kotlin-language-version-configured": "true",
-    "last_opened_file_path": "D:/Personal Folders/SND/major-capstone-project/BackEnd",
-    "settings.editor.selected.configurable": "preferences.pluginManager"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Application.ApiGateawayApplication.executor&quot;: &quot;Run&quot;,
+    &quot;Application.CustomersapiserviceApplication.executor&quot;: &quot;Run&quot;,
+    &quot;Application.EurekaDiscoveryServerApplication.executor&quot;: &quot;Run&quot;,
+    &quot;Application.RestaurantServiceApplication.executor&quot;: &quot;Run&quot;,
+    &quot;Application.UserAuthenticationServiceApplication.executor&quot;: &quot;Run&quot;,
+    &quot;Application.abc.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;dev-v1&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;D:/Personal Folders/SND/major-capstone-project/BackEnd&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="C:\Users\Avish Madaan\Desktop\NIIT\Phase 2\Course 14 - Capstone Project\major-capstone-project\FoodieApp" />
     </key>
   </component>
-  <component name="RunManager" selected="Application.ApiGateawayApplication">
+  <component name="RunManager">
     <configuration name="ApiGateawayApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="com.example.ApiGateaway.ApiGateawayApplication" />
       <module name="ApiGateaway" />
@@ -137,11 +139,11 @@
     </list>
     <recent_temporary>
       <list>
+        <item itemvalue="Application.EurekaDiscoveryServerApplication" />
+        <item itemvalue="Application.UserAuthenticationServiceApplication" />
         <item itemvalue="Application.CustomersapiserviceApplication" />
+        <item itemvalue="Application.RestaurantServiceApplication" />
         <item itemvalue="Application.ApiGateawayApplication" />
-        <item itemvalue="Application.UserAuthenticationServiceApplication" />
-        <item itemvalue="Application.EurekaDiscoveryServerApplication" />
-        <item itemvalue="Application.RestaurantServiceApplication" />
       </list>
     </recent_temporary>
   </component>
Index: ../FrontEnd/DishDash/src/app/Components/navbar/navbar.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component, OnInit } from '@angular/core';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { UserService } from '../../services/user.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { LoginComponent } from '../login/login.component';\r\nimport { customer } from '../../Model/customer';\r\nimport { RegisterComponent } from '../register/register.component';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrl: './navbar.component.css'\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n\r\n  activeCustomer:customer;\r\n  customerJwt:string;\r\n\r\n  constructor(private cookieService:CookieService, private userService:UserService, public dialog:MatDialog){}\r\n  isLoggedIn:boolean = false;\r\n\r\n  ngOnInit(): void {\r\n\r\n    if(this.cookieService.check(\"token\")) {\r\n      this.isLoggedIn = true\r\n      this.customerJwt = this.cookieService.get(\"token\")\r\n      console.log(\"Jwt: \"+this.customerJwt);\r\n      this.fetchActiveCustomer();\r\n    }\r\n\r\n    this.userService.logInSubject.subscribe({\r\n      next:data => {\r\n        this.isLoggedIn = data;\r\n        this.customerJwt = this.cookieService.get(\"token\")\r\n        this.fetchActiveCustomer();\r\n      }\r\n    })\r\n  }\r\n\r\n  logout() {\r\n    this.cookieService.delete(\"token\");\r\n    this.isLoggedIn=false;\r\n  }\r\n\r\n  openLoginDialog(enterAnimationDuration: string, exitAnimationDuration: string):void {\r\n    this.dialog.open(LoginComponent, {\r\n      width: \"400px\"\r\n    })\r\n  }\r\n\r\n  openSignupDialog(enterAnimationDuration: string, exitAnimationDuration: string):void {\r\n    this.dialog.open(RegisterComponent, {\r\n      width: \"400px\"\r\n    })\r\n  }\r\n\r\n  fetchActiveCustomer() {\r\n    console.log(\"Fetch called\")\r\n    console.log(\"Inside fetc jwt :\" +this.customerJwt);\r\n    this.userService.fetchCustomerByJwt(this.customerJwt).subscribe({\r\n      next:data => {\r\n        this.activeCustomer = data\r\n        console.log(data);\r\n      },\r\n      error:e => {\r\n        console.log(e);\r\n\r\n      }\r\n    })\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FrontEnd/DishDash/src/app/Components/navbar/navbar.component.ts b/../FrontEnd/DishDash/src/app/Components/navbar/navbar.component.ts
--- a/../FrontEnd/DishDash/src/app/Components/navbar/navbar.component.ts	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/../FrontEnd/DishDash/src/app/Components/navbar/navbar.component.ts	(date 1718110397433)
@@ -60,6 +60,7 @@
     this.userService.fetchCustomerByJwt(this.customerJwt).subscribe({
       next:data => {
         this.activeCustomer = data
+        this.userService.sendCustomerFavRest(data.customerFavRestaurant)
         console.log(data);
       },
       error:e => {
Index: ../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.css b/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.css
--- a/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.css	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.css	(date 1718109952532)
@@ -1,0 +1,3 @@
+.close-button {
+    margin: 10px 15px auto auto;
+    }
\ No newline at end of file
Index: ../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Dialog } from '@angular/cdk/dialog';\r\nimport { Component } from '@angular/core';\r\nimport { LoginComponent } from '../login/login.component';\r\n\r\n@Component({\r\n  selector: 'app-loginalert',\r\n  templateUrl: './loginalert.component.html',\r\n  styleUrl: './loginalert.component.css'\r\n})\r\nexport class LoginalertComponent {\r\n  constructor(private dialog:Dialog){}\r\n\r\n  openLoginDialog(){\r\n    this.dialog.open(LoginComponent);\r\n  }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.ts b/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.ts
--- a/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.ts	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/../FrontEnd/DishDash/src/app/Components/loginalert/loginalert.component.ts	(date 1718109799230)
@@ -1,6 +1,7 @@
 import { Dialog } from '@angular/cdk/dialog';
 import { Component } from '@angular/core';
 import { LoginComponent } from '../login/login.component';
+import { MatDialog, MatDialogRef } from '@angular/material/dialog';
 
 @Component({
   selector: 'app-loginalert',
@@ -8,9 +9,14 @@
   styleUrl: './loginalert.component.css'
 })
 export class LoginalertComponent {
-  constructor(private dialog:Dialog){}
+  constructor(private dialog:MatDialog, public dialogRef:MatDialogRef<LoginalertComponent>){}
+
+  closeDialog(){
+    this.dialogRef.close();
+  }
 
   openLoginDialog(){
+    this.closeDialog();
     this.dialog.open(LoginComponent);
   }
 
Index: ../FrontEnd/DishDash/src/app/services/user.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { customerLogin } from '../Model/customerLogin';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { customer } from '../Model/customer';\r\nimport { restaurant } from '../Model/restaurant';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  loginAPIkey:string = ``;\r\n\r\n  logInSubject = new Subject<boolean>()\r\n\r\n  constructor(private http:HttpClient) { }\r\n\r\n  loginUser(data:customerLogin):Observable<string> {\r\n    return this.http.post(\"http://localhost:8081/api/v1/login\", data,  { responseType: 'text' });\r\n  }\r\n\r\n  registerUser(customer:any):Observable<any>\r\n  {\r\n    return this.http.post<any>(\"http://localhost:8083/api/v2/register\",customer);\r\n  }\r\n\r\n  fetchCustomerByJwt(Jwt:any):Observable<customer> {\r\n\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${Jwt}` \r\n    });\r\n    console.log(headers);\r\n\r\n    return this.http.get<customer>('http://localhost:8083/api/v2/customers/eachcustomer',{ headers });\r\n  }\r\n\r\n  fetchCustomerFavRestaurants(customerId:string):Observable<string> {\r\n    return this.http.get<string>(\"url\")\r\n  }\r\n\r\n  login(isLoggedIn:boolean) {\r\n    this.logInSubject.next(isLoggedIn);\r\n  }\r\n\r\n  fetchCustomerFavByJwt(Jwt:any):Observable<Array<string>> {\r\n\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${Jwt}` \r\n    });\r\n    console.log(headers);\r\n\r\n    return this.http.get<Array<string>>('http://localhost:8083/api/v2/customers/eachcustomer',{ headers });\r\n  }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FrontEnd/DishDash/src/app/services/user.service.ts b/../FrontEnd/DishDash/src/app/services/user.service.ts
--- a/../FrontEnd/DishDash/src/app/services/user.service.ts	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/../FrontEnd/DishDash/src/app/services/user.service.ts	(date 1718111595055)
@@ -14,6 +14,8 @@
 
   logInSubject = new Subject<boolean>()
 
+  getCustomerFavRestaurants = new Subject<Array<string>>
+
   constructor(private http:HttpClient) { }
 
   loginUser(data:customerLogin):Observable<string> {
@@ -54,4 +56,21 @@
   }
 
 
+  //This is sending to Restaurant View
+  sendCustomerFavRest(favRest:string[]) {
+    this.getCustomerFavRestaurants.next(favRest);
+  }
+
+  //Sending Customer Fav To Backend
+
+  sendFavoriteRestToCustomer(resId:string, Jwt:string) {
+
+    const headers = new HttpHeaders({
+      'Authorization': `Bearer ${Jwt}` 
+    });
+    console.log(headers);
+
+    this.http.put<string>("http://localhost:8082/api/v2//customers/addfavres", resId, { headers })
+  }
+
 }
Index: UserAuthenticationService/src/main/java/com/example/UserAuthenticationService/domain/Customer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.UserAuthenticationService.domain;\r\n\r\nimport jakarta.persistence.Entity;\r\n\r\nimport jakarta.persistence.Id;\r\nimport jakarta.validation.constraints.Email;\r\nimport jakarta.validation.constraints.NotNull;\r\nimport jakarta.validation.constraints.Size;\r\nimport lombok.*;\r\n\r\n@Entity\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@ToString\r\npublic class Customer {\r\n\r\n    @Id\r\n    private String customerId;\r\n    private String customerEmail;\r\n\r\n\r\n    private String customerPassword;\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UserAuthenticationService/src/main/java/com/example/UserAuthenticationService/domain/Customer.java b/UserAuthenticationService/src/main/java/com/example/UserAuthenticationService/domain/Customer.java
--- a/UserAuthenticationService/src/main/java/com/example/UserAuthenticationService/domain/Customer.java	(revision 30e26ff62633f08bdc7225834cffc8fe40a050b2)
+++ b/UserAuthenticationService/src/main/java/com/example/UserAuthenticationService/domain/Customer.java	(date 1718089182391)
@@ -19,8 +19,6 @@
     @Id
     private String customerId;
     private String customerEmail;
-
-
     private String customerPassword;
 
 
